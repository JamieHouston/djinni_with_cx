// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from token.djinni

#pragma once

#include "djinni_support.hpp"
#include "token.hpp"

namespace jnins {

class Token final : ::djinni::JniInterface<::Token, Token> {
public:
    using CppType = std::shared_ptr<::Token>;
    using JniType = jobject;

    using Boxed = Token;

    ~Token();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<Token>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<Token>::get()._toJava(jniEnv, c)}; }

private:
    Token();
    friend ::djinni::JniClass<Token>;
    friend ::djinni::JniInterface<::Token, Token>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::Token
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string whoami() override;

    private:
        using ::djinni::JavaProxyCacheEntry::getGlobalRef;
        friend ::djinni::JniInterface<::Token, ::jnins::Token>;
        friend ::djinni::JavaProxyCache<JavaProxy>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("Token") };
    const jmethodID method_whoami { ::djinni::jniGetMethodID(clazz.get(), "whoami", "()Ljava/lang/String;") };
};

}  // namespace jnins
